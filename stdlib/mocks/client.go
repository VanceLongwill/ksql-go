// Code generated by MockGen. DO NOT EDIT.
// Source: ../client/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	client "github.com/vancelongwill/ksql-go/client"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Describe mocks base method
func (m *MockClient) Describe(ctx context.Context, source string) (client.DescribeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Describe", ctx, source)
	ret0, _ := ret[0].(client.DescribeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Describe indicates an expected call of Describe
func (mr *MockClientMockRecorder) Describe(ctx, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockClient)(nil).Describe), ctx, source)
}

// Exec mocks base method
func (m *MockClient) Exec(ctx context.Context, params client.ExecPayload) ([]client.ExecResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, params)
	ret0, _ := ret[0].([]client.ExecResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockClientMockRecorder) Exec(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockClient)(nil).Exec), ctx, params)
}

// Explain mocks base method
func (m *MockClient) Explain(ctx context.Context, queryNameOrExpression string) (client.ExplainResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Explain", ctx, queryNameOrExpression)
	ret0, _ := ret[0].(client.ExplainResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Explain indicates an expected call of Explain
func (mr *MockClientMockRecorder) Explain(ctx, queryNameOrExpression interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explain", reflect.TypeOf((*MockClient)(nil).Explain), ctx, queryNameOrExpression)
}

// Healthcheck mocks base method
func (m *MockClient) Healthcheck(ctx context.Context) (client.HealthcheckResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthcheck", ctx)
	ret0, _ := ret[0].(client.HealthcheckResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Healthcheck indicates an expected call of Healthcheck
func (mr *MockClientMockRecorder) Healthcheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthcheck", reflect.TypeOf((*MockClient)(nil).Healthcheck), ctx)
}

// Info mocks base method
func (m *MockClient) Info(ctx context.Context) (client.InfoResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx)
	ret0, _ := ret[0].(client.InfoResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockClientMockRecorder) Info(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockClient)(nil).Info), ctx)
}

// InsertsStream mocks base method
func (m *MockClient) InsertsStream(ctx context.Context, payload client.InsertsStreamTargetPayload) (*client.InsertsStreamWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertsStream", ctx, payload)
	ret0, _ := ret[0].(*client.InsertsStreamWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertsStream indicates an expected call of InsertsStream
func (mr *MockClientMockRecorder) InsertsStream(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertsStream", reflect.TypeOf((*MockClient)(nil).InsertsStream), ctx, payload)
}

// ListQueries mocks base method
func (m *MockClient) ListQueries(ctx context.Context) (client.ListQueriesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueries", ctx)
	ret0, _ := ret[0].(client.ListQueriesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueries indicates an expected call of ListQueries
func (mr *MockClientMockRecorder) ListQueries(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueries", reflect.TypeOf((*MockClient)(nil).ListQueries), ctx)
}

// ListTables mocks base method
func (m *MockClient) ListTables(ctx context.Context) (client.ListTablesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTables", ctx)
	ret0, _ := ret[0].(client.ListTablesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTables indicates an expected call of ListTables
func (mr *MockClientMockRecorder) ListTables(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTables", reflect.TypeOf((*MockClient)(nil).ListTables), ctx)
}

// ListStreams mocks base method
func (m *MockClient) ListStreams(ctx context.Context) (client.ListStreamsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStreams", ctx)
	ret0, _ := ret[0].(client.ListStreamsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStreams indicates an expected call of ListStreams
func (mr *MockClientMockRecorder) ListStreams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStreams", reflect.TypeOf((*MockClient)(nil).ListStreams), ctx)
}

// ListProperties mocks base method
func (m *MockClient) ListProperties(ctx context.Context) (client.ListPropertiesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProperties", ctx)
	ret0, _ := ret[0].(client.ListPropertiesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProperties indicates an expected call of ListProperties
func (mr *MockClientMockRecorder) ListProperties(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProperties", reflect.TypeOf((*MockClient)(nil).ListProperties), ctx)
}

// Query mocks base method
func (m *MockClient) Query(ctx context.Context, payload client.QueryPayload) (*client.QueryRows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, payload)
	ret0, _ := ret[0].(*client.QueryRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockClientMockRecorder) Query(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockClient)(nil).Query), ctx, payload)
}

// QueryStream mocks base method
func (m *MockClient) QueryStream(ctx context.Context, payload client.QueryStreamPayload) (*client.QueryStreamRows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStream", ctx, payload)
	ret0, _ := ret[0].(*client.QueryStreamRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStream indicates an expected call of QueryStream
func (mr *MockClientMockRecorder) QueryStream(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStream", reflect.TypeOf((*MockClient)(nil).QueryStream), ctx, payload)
}

// CloseQuery mocks base method
func (m *MockClient) CloseQuery(ctx context.Context, payload client.CloseQueryPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseQuery", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseQuery indicates an expected call of CloseQuery
func (mr *MockClientMockRecorder) CloseQuery(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseQuery", reflect.TypeOf((*MockClient)(nil).CloseQuery), ctx, payload)
}

// TerminateCluster mocks base method
func (m *MockClient) TerminateCluster(ctx context.Context, payload client.TerminateClusterPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateCluster", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// TerminateCluster indicates an expected call of TerminateCluster
func (mr *MockClientMockRecorder) TerminateCluster(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateCluster", reflect.TypeOf((*MockClient)(nil).TerminateCluster), ctx, payload)
}
